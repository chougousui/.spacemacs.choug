dotspacemacs-read-process-output-max (* 2048 1024)
dotspacemacs-line-numbers t
dotspacemacs-folding-method 'origami

dotspacemacs-configuration-layers
'(
  (auto-completion :variables
                      auto-completion-minimum-prefix-length 2
                      auto-completion-idle-delay 0.0)
  (git :variables               ;; 需要安装delta
          git-enable-magit-delta-plugin t
          git-enable-magit-gitflow-plugin t)
  (version-control :variables
                   version-control-diff-tool 'git-gutter
                   version-control-diff-side 'left)
  lsp
  (python :variables
             python-backend 'lsp
             python-formatter 'black
             python-format-on-save t
             python-sort-imports-on-save t
             python-fill-column 119)
  (go :variables
         go-tab-width 4
         go-backend 'lsp             ;; need isntall gopls
         godoc-at-point-function 'godoc-gogetdoc
         gofmt-command "golines"     ;; need install golines
         gofmt-args '("-m120")
         go-format-before-save t
         go-use-golangci-lint t)
  rust
  (typescript :variables
                 typescript-backend 'lsp
                 typescript-fmt-tool 'prettier
                 typescript-fmt-on-save t
                 typescript-indent-level 2
                 )
  (javascript :variables
              javascript-fmt-tool 'prettier
              javascript-fmt-on-save t
              js-basic-offset 2
              js-indent-level 2
              )
  (html :variables
        web-fmt-tool 'prettier
        css-enable-lsp t
        scss-enable-lsp t
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        ;; web-mode-script-padding 2
        web-mode-sql-indent-offset 2
        web-mode-attr-indent-offset 2
        )
  (json :variables
        json-backend 'lsp
        json-fmt-tool 'prettier
        json-fmt-on-save t)
  yaml
  csv
  (sql :variables
          sql-backend 'lsp
          sql-lsp-sqls-workspace-config-path 'root
          sql-capitalize-keywords t
          sql-capitalize-keywords-blacklist '("name" "user")
          sql-auto-indent t)
  
  (plantuml :variables
            plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar"
            org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  (tabs :variables
        tabs-auto-hide t
        centaur-tabs-set-bar 'over)
  (treemacs :variables
            treemacs-use-git-mode 'deferred)
  (osx :variables
          osx-swap-option-and-command t)
  choug
  )

dotspacemacs-additional-packages '(
                                   swiper
                                   tiny
                                   (copilot :location (recipe
                                                          :fetcher github
                                                          :repo "zerolfx/copilot.el"
                                                          :files ("*.el" "dist")
                                                          )
                                               )
                                   )
dotspacemacs-excluded-packages '(
                                 vi-tilde-fringe
                                 vim-empty-lines-mode
                                 pangu-spacing
                                 tide
                                 )
dotspacemacs-default-font '("JetBrains Mono"
                            :size 12.0
                            :weight normal
                            :width normal)

(defun dotspacemacs/user-config ()
  ;; 不使用chinese layer独立设置字体,server模式下也有效
  ;; 已知搭配(27,32)(16,20)(15,18)
  ;; 有小数点则可参与系统级别的缩放,建议搭配(10.0,12.0),(12.0,14.0)
  (spacemacs|do-after-display-system-init
   (when (display-graphic-p)
     (dolist (charset '(kana han cjk-misc bopomofo))
       (set-fontset-font (frame-parameter nil 'font) charset
                         (font-spec :family "STKaiti" :size 14.0)))))
  (with-eval-after-load 'git-gutter-fringe ;;need git-gutter as diff tools
    (set-face-background 'git-gutter-fr:added "#67b11d")
    (set-face-background 'git-gutter-fr:modified "#4f97d7")
    (set-face-background 'git-gutter-fr:deleted "#f2241f"))
  (setq org-startup-indented t)
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
  (add-hook 'css-mode-hook 'prettier-js-mode)
  (setq undo-tree-auto-save-history nil)
  (setq warning-suppress-types '((comp)))
  (setq fill-column 120)

  ;; tsx mode本质是web-mode,但lsp在调整缩进时考虑的是web-mode
  ;; 因此手动加上 tsx mode情况下的缩进
  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp--formatting-indent-alist '(typescript-tsx-mode . typescript-indent-level))
    ;; jsx使用web-mode,也需要配置
    (add-to-list 'lsp--formatting-indent-alist '(web-mode . typescript-indent-level)))

  ;; typescript-tsx-mode中,禁止在=后面自动添加"
  ;; 否则写 onClick={() =>} 时,会出现 =">
  ;; 写 disabled={'x' === 'y'}时会出现 ="="=", angular只会在括号嵌套层次较深时出现这个问题,但react总是出现
  ;; with-eval-after-load只设置一次,不理想,希望每次进入该模式都设置,使用hook
  (defun tsx-stop-auto-closeing ()
    ;; setq会影响其他buffer中基于web-mode的major mode,比如angular的html文件,因此使用setq-local
    (setq-local web-mode-auto-quote-style 3);; 代码中定义 1: "", 2: '', 3: {} 但程序界面里面定义为0 1 2
    (setq-local web-mode-enable-auto-quoting nil);; 代码中定义 1: "", 2: '', 3: {} 但程序界面里面定义为0 1 2
  )
  (add-hook 'typescript-tsx-mode-hook 'tsx-stop-auto-closeing)

  ;; tsx-mode下需要自动补全单引号,jsx-mode下情况正常
  (defvar tsx-electric-pairs '((?\' . ?\')) "electric pairs for tsx-mode.")
  (defun tsx-add-electric-pairs ()
    (setq-local electric-pair-pairs (append electric-pair-pairs tsx-electric-pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))
  (add-hook 'typescript-tsx-mode-hook 'tsx-add-electric-pairs)

  ;; copilot配置
  ;; (with-eval-after-load 'company
  ;;   ;; 禁用inline preview?
  ;;   (delq 'company-preview-if-just-one-frontend company-frontends))
  ;; 当major-mode为prog-mode派生且不是dotenv-mode时,启用copilot
  ;; (add-hook 'prog-mode-hook
  ;;           (lambda ()
  ;;             (unless (derived-mode-p 'dotenv-mode)
  ;;               (copilot-mode 1)
  ;;               )))
  ;; (with-eval-after-load 'copilot
  ;;   (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  ;;   (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  ;;   (setq copilot-enable-predicates nil)
  ;;   )
  ;; (define-key evil-insert-state-map (kbd "C-<tab>") 'copilot-accept-completion-by-word)
  ;; (define-key evil-insert-state-map (kbd "C-TAB") 'copilot-accept-completion-by-word)
)

;;;;;;;;;;;;;;;;;; ~/.emacs.d/init.el
;; ignore all the evil* holy* hybrid* packages
(define-advice configuration-layer//add-package (:around (orig pkg &optional usedp))
  "filter out the evil* holy* packages."
  (let ((name (format "%s" (oref pkg :name))))
    (unless (seq-some (lambda (x) (string-prefix-p x name)) '("evil" "holy" "hybrid"))
      (funcall orig pkg usedp))))
;; use the default face
(define-advice spacemacs//evil-state-face (:around (fn))
  (spaceline-highlight-face-default))
;; mock the essential variables, functions and macros
(defvar evil-insert-state-map (make-sparse-keymap))
(defvar evil-motion-state-map (make-sparse-keymap))
(defvar evil-normal-state-map (make-sparse-keymap))
(defvar evil-intercept-maps '())
(defalias 'evil-avy-goto-char-timer 'avy-goto-char-timer)
(defmacro evil-define-key (state keymap key def &rest bindings))
(defmacro evilified-state-evilify-map (map &rest props))
(defun evil-global-set-key (state key def))
(defun evil-end-undo-step ())
(defun evil-evilified-state ())
(defun evil-ex-define-cmd (cmd function))
(defun evil-normalize-keymaps (&optional state))
(defun evil-start-undo-step ())
(defun evil-set-custom-state-maps (var pending-var key _make newlist))
(defun evil-set-initial-state (mode state))