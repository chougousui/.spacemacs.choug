dotspacemacs-read-process-output-max (* 2048 1024)
dotspacemacs-maximized-at-startup t
dotspacemacs-line-numbers t
dotspacemacs-folding-method 'origami

dotspacemacs-configuration-layers
'(
  shell-path
  formatter-socket
  (auto-completion :variables
                      auto-completion-minimum-prefix-length 2
                      auto-completion-idle-delay 0.05)
  (compleseus :variables
                 compleseus-engine 'vertico) ;; 不再使用helm
  (git :variables               ;; 需要安装delta
          git-enable-magit-delta-plugin t
          git-enable-magit-gitflow-plugin t)
  (version-control :variables
                   version-control-diff-tool 'git-gutter
                   version-control-diff-side 'left)
  (lsp :variables
          lsp-file-watch-threshold 1500
          lsp-enable-on-type-formatting t
          lsp-before-save-edits t)
  (python :variables
             python-backend 'lsp
             python-lsp-server 'pyright
             ;; 通过自定义方式让emacs支持了使用ruff formmat作为python格式化工具
             ;; 好在spacemacs不完全要求值在列表内
             python-formatter 'ruff
             python-format-on-save t   ;; 对lsp formatter无效,需额外手动使用hook实现
             python-sort-imports-on-save t
             lsp-enable-on-type-formatting t ;; 目前的ruff-lsp忽略了这个变量
             lsp-ruff-server-command '("ruff" "server" "--preview")
             python-fill-column 120)
  (go :variables
         go-tab-width 4
         go-backend 'lsp             ;; need isntall gopls
         godoc-at-point-function 'godoc-gogetdoc
         gofmt-command "golines"     ;; need install golines
         gofmt-args '("-m120" "--base-formatter=gofumpt") ;; need install gofumpt
         go-format-before-save t
         go-use-golangci-lint t)
  (rust :variables
           rustic-format-on-save t
           cargo-process-reload-on-modify t)
  (php :variables
          php-backend 'lsp
          c-basic-offset 2
          tab-width 2)
  (csharp :variables
             csharp-backend 'omnisharp
             )
  (dart :variables
           dart-backend 'lsp
           lsp-dart-sdk-dir "$HOME/fvm/versions/3.24.0/bin/cache/dart-sdk/"
           lsp-enable-on-type-formatting t
           dart-server-format-on-save t)
  (kotlin :variables
             kotlin-backend 'lsp
             lsp-clients-kotlin-server-executable "/usr/bin/kotlin-language-server"
             )
  (typescript :variables
                 typescript-backend 'lsp
                 typescript-fmt-tool 'prettier
                 typescript-fmt-on-save t
                 typescript-indent-level 2
                 )
  (javascript :variables
              javascript-fmt-tool 'prettier
              javascript-fmt-on-save t
              js-basic-offset 2
              js-indent-level 2
              )
  (html :variables
        web-fmt-tool 'prettier
        css-enable-lsp t
        scss-enable-lsp t
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        ;; web-mode-script-padding 2
        web-mode-sql-indent-offset 2
        web-mode-attr-indent-offset 2
        web-mode-enable-auto-closing t
        web-mode-auto-close-style 2
        )
  (json :variables
        json-backend 'lsp
        json-fmt-tool 'prettier
        json-fmt-on-save t)
  (lua :variables
          lua-backend 'lsp
          lua-lsp-server 'lua-language-server)
  protobuf
  yaml
  csv
  (sql :variables
          sql-backend 'lsp
          sql-lsp-sqls-workspace-config-path 'root
          sql-capitalize-keywords t
          sql-capitalize-keywords-blacklist '("name" "user")
          sql-auto-indent t
          )
  nginx
  (docker :variables
             docker-dockerfile-backend 'lsp)
  (plantuml :variables
            plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar"
            org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar"
            plantuml-indent-level 4)
  (tabs :variables
        tabs-auto-hide t
        centaur-tabs-set-bar 'over)
  (treemacs :variables
            treemacs-use-git-mode 'deferred)
  (osx :variables
          osx-swap-option-and-command t)
  codeium
  choug
  ;; (chinese :variables                             ;; 如果要基于chinese layer使用fcitx.el则如此配置,但一般不用
  ;;          chinese-enable-fcitx t                 ;; 如果只为使用fcitx,则还要删除pyim,pyim-basedict等包
  ;;          chinese-use-fcitx5 t
  ;;          chinese-fcitx-use-dbus t
  ;;          fcitx-use-dbus 'fcitx5)
  fcitx
  ;; (chinese :variables                             ;; 如果要基于chinese layer使用双拼功能则如此设置
  ;;          pyim-default-scheme 'flypy-workman
  ;;          pyim-page-length 7)
  pyim-flypy-workman                                 ;; 但最后自定义了一个更方便的layer
  )

dotspacemacs-additional-packages '(
                                   swiper
                                   tiny
                                   docstr
                                   auto-yasnippet
                                   python-docstring
                                   )

dotspacemacs-excluded-packages '(
                                    vi-tilde-fringe
                                    vim-empty-lines-mode

                                    pyim-wbdict
                                    find-by-pinyin-dired
                                    ace-pinyin
                                    pangu-spacing
                                    youdao-dictionary
                                    chinese-conv

                                    tide

                                    hybrid-mode
                                    evil-unimpaired
                                    info+
                                    evil-escape
                                    term-cursor
                                    sql-indent
                                    inspector
                                    hide-comnt
                                    help-fns+

                                    php-auto-yasnippets
                                    phpcbf

                                    popwin
                                    window-purpose
                                    eyebrowse

                                    ;; csharp layer引入的部分包
                                    csharp-mode ;; emacs 31中成为内置mode

                                    ;; html layer引入的部分包
                                    scss-mode ;; emacs 31中成为内置css-mode的派生mode
                                    web-beautify ;; 并不使用该mode来格式化
                                    )
dotspacemacs-default-font '("JetBrains Mono"
                            :size 12.0
                            :weight normal
                            :width normal)

(defun dotspacemacs/user-config ()
  ;; 不使用chinese layer独立设置字体,server模式下也有效
  ;; 已知搭配(27,32)(16,20)(15,18)
  ;; 有小数点则可参与系统级别的缩放,建议搭配(10.0,12.0),(12.0,14.0)
  (spacemacs|do-after-display-system-init
   (when (display-graphic-p)
     (dolist (charset '(kana han cjk-misc bopomofo))
       (set-fontset-font (frame-parameter nil 'font) charset
                         ;; (font-spec :family "STKaiti" :size 14)  ;; 或华文楷体,然而其不是等宽字体,尤其在pgtk下显示异常
                         ;; (font-spec :family "AR PL UKai CN" :size 14.5)
                         (font-spec :family "KaiTi" :size 14.5)
                         ))))
)

;;;;;;;;;;;;;;;;;; ~/.emacs.d/init.el
;; ignore all the evil* holy* hybrid* packages
(define-advice configuration-layer//add-package (:around (orig pkg &optional usedp))
  "filter out the evil* holy* packages."
  (let ((name (format "%s" (oref pkg :name))))
    (unless (seq-some (lambda (x) (string-prefix-p x name)) '("evil" "holy" "hybrid"))
      (funcall orig pkg usedp))))
;; use the default face
(define-advice spacemacs//evil-state-face (:around (fn))
  (spaceline-highlight-face-default))
;; mock the essential variables, functions and macros
(defvar evil-insert-state-map (make-sparse-keymap))
(defvar evil-motion-state-map (make-sparse-keymap))
(defvar evil-normal-state-map (make-sparse-keymap))
(defvar evil-intercept-maps '())
(defalias 'evil-avy-goto-char-timer 'avy-goto-char-timer)
(defmacro evil-define-key (state keymap key def &rest bindings))
(defmacro evilified-state-evilify-map (map &rest props))
(defun evil-global-set-key (state key def))
(defun evil-end-undo-step ())
(defun evil-evilified-state ())
(defun evil-ex-define-cmd (cmd function))
(defun evil-normalize-keymaps (&optional state))
(defun evil-start-undo-step ())
(defun evil-set-custom-state-maps (var pending-var key _make newlist))
(defun evil-set-initial-state (mode state))
(defun evil-add-command-properties (&rest args))